#!/bin/bash
# 1un
# 2017-12-19 -update (更新进程tcp监控)
# zabbix自动发现服务项,监控服务各项状态

#[ ! -s /svndata/svr/mod.txt ] && echo 1 && exit

SerName(){
    Ser=($(/usr/bin/supervisorctl status 2> /dev/null | awk '{print $1}') supervisord)
    printf '{\n'
    printf '\t"data": [\n'
    for((i=0;i<${#Ser[@]};++i))
    {
        num=$(echo $((${#Ser[@]}-1)))
        if [ "$i" != ${num} ];
                then
            printf "\t\t{ \n"
            printf "\t\t\t\"{#SITENAME}\":\"${Ser[$i]}\"},\n"
        else
            printf "\t\t{ \n"
            printf "\t\t\t\"{#SITENAME}\":\"${Ser[$num]}\"}\n\t\t]\n}\n"
        fi
    }
    if [[ ${#Ser[@]} -eq 0 ]]; then
        printf "\t\t]\n}\n"
    fi
}

GetValue(){

    PNAME=${1%_*}
    PID=$(pgrep ${PNAME:0:15})

    GetMem(){
        MEMUsage=$(ps -o rsz -p $1|grep -v RSZ)
        MEMUsage=$(echo "sclae=2; $MEMUsage/1000" | bc)
        echo $MEMUsage
        }
    GetVsz(){
        MEMUsage=$(ps -o vsz -p $1|grep -v VSZ)
        MEMUsage=$(echo "sclae=2; $MEMUsage/1000" | bc)
        echo $MEMUsage
        }
    GetEtime(){
        TIME=$(ps -o etime -p $1|grep -v ELAPSED|sed 's/ *//')
        if [ ${#TIME} -lt 8 ];then          #进程运行时间不足一小时
            ETIME=$(echo $TIME|sed 's/^/00-00:/')
        elif [ ${#TIME} -lt 9 ];then        #进程运行时间不足一天
            ETIME=$(echo $TIME|sed 's/^/00-/')
        else
           ETIME=$TIME
        fi
        ETIMEUsage=$(echo $ETIME|cut -d: -f1|awk -F'-' '{print $1"*24+"$2}'|bc)
        echo $ETIMEUsage
    }
    GetPsCpu(){
        CPUUsage=$(ps -o pcpu -p $1|grep -v CPU)
        echo $CPUUsage
    }

    case $2 in
    cpu)
        cpu_usage=`GetPsCpu $PID`
        echo $cpu_usage
        ;;
    mem)
        mem_usage=`GetMem $PID`
        echo $mem_usage
        ;;
    vsz)
        mem_usage=`GetVsz $PID`
        echo $mem_usage
        ;;
    swap)
        swap_usage=`awk '/^Swap:/ {SWAP+=$2}END{print SWAP}' /proc/$PID/smaps`
        if [ $swap_usage -eq 0 ]; then
            echo 0
        else
            echo $swap_usage
        fi
        ;;
    etime)
        etime_usage=$(GetEtime $PID)
        echo $etime_usage
        ;;
    *)
        echo "Usage: $0 GetValue $1 [ cpu | mem | vsz | swap | etime ]"
        ;;
    esac
}

GetStatus(){
    if [[ $1 == "supervisord" ]]; then
        num=$(pgrep supervisord | wc -l)
    else
        stats=$(supervisorctl status $1|awk '{print $2}')
        if [[ $stats == "RUNNING" ]]; then
            num=1
        else
            num=0
        fi
    fi
    echo $num
}

GetTCP(){
    _PNAME=${1%_*}
    PNAME=${_PNAME:0:15}
    tcp=${2:-99999}
    state=(established syn-sent syn-recv fin-wait-1 fin-wait-2 time-wait closed close-wait last-ack listen closing)
    _port=$(/sbin/ss -tlnp | awk '$6 ~ /'""$PNAME""'/ {print $4}')
    port=${_port#*\*}

    if [[ "X$2" == "Xall" ]]; then
        num=$(/sbin/ss -t -o state all sport = $port | egrep -v '^State|^LISTEN' | wc -l)
    elif [[ "$(echo ${state[@]} | grep -c $tcp)"  -gt 0 ]]; then
        num=$(/sbin/ss -t -o state $2 sport = $port | egrep -v '^State|^LISTEN' | wc -l)
    else
        echo "Usage: $0 GetTCP $1 [ established | syn-sent | syn-recv | fin-wait-1 | fin-wait-2 | time-wait | closed | close-wait | last-ack | listen | closing ]"
    fi

    echo $num
}

case "$1" in    # opt
    SerName)
        SerName # list
        ;;
    GetValue)   # sername type
        GetValue $2 $3
        ;;
    GetStatus)  # sername
        GetStatus $2
        ;;
    GetTCP)     # sername type
        GetTCP $2 $3
        ;;
*)
    echo "Usage:$0 { SerName | GetValue [SerName] [type] | GetTCP [SerName] [type] | GetStatus [SerName] }"
    ;;
esac
